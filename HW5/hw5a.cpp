/*
  Author:Fan Yang
  Cite:Jiabin Li
   asked her about the question of overload.
*/
#include <iostream>
#include <cmath>
using namespace std;

class Vec3d {
private:
    double x,y,z;
public:
    Vec3d(double x = 0, double y = 0, double z = 0) : x(x), y(y), z(z) {
    }
//#if 0
    // not needed, this is generated by default
    Vec3d(const Vec3d& orig) : x(orig.x), y(orig.y), z(orig.z) {
    }
    Vec3d& operator =(const Vec3d& orig) {
        x = orig.x;
        y = orig.y;
        z = orig.z;
        return *this;
    }
  Vec3d& operator * (int a)
    {
        x*=a;
        y*=a;
        z*=a;
        return *this;
    }
   
     Vec3d& operator + (const Vec3d& a)
    {
        x=a.x+this->x;
        y=a.y+this->y;
        z=a.z+this->z;
        return *this;
    }
     Vec3d& operator - (const Vec3d& a)
    {
        x=a.x-this->x;
        y=a.y-this->y;
        z=a.z-this->z;
        return *this;
    }
    double dot(const Vec3d& a)
    {
        double dot;
        x=x*a.x;
        y=y*a.y;
        z=z*a.z;
        dot=x+y+z;
        return dot;
    }
    double dist(const Vec3d& a)
    {
        double dis;
        double d1,d2,d3;
        d1=a.x-this->x;
        d2=a.y-this->y;
        d3=a.z-this->z;
        dis=sqrt(d1*d1+d2*d2+d3*d3);
        return dis;
    }
    friend ostream& operator << (ostream& s, const Vec3d& a);
    friend double dist(const Vec3d& a, const Vec3d& b);
    friend double dot(const Vec3d& a, const Vec3d& b);
    friend Vec3d operator *(int a, const Vec3d& b);
//#endif
};
ostream& operator << (ostream& s, const Vec3d& a)
{
    s<<"("<<a.x<<","<<a.y<<","<<a.z<<")"<<'\n';
    return s;
}
Vec3d operator *(int a, const Vec3d& e)
{
    Vec3d c;
    c.x=a*e.x;
    c.y=a*e.y;
    c.z=a*e.z;
    return c;
}

double dot(const Vec3d& a, const Vec3d& b)
{
    return(a.x*b.x+a.y*b.y+a.z*b.z);
}
double dist(const Vec3d& a, const Vec3d& b)
{
    double dis;
    double d1,d2,d3;
    d1=a.x-b.x;
    d2=a.y-b.y;
    d3=a.z-b.z;
    dis=sqrt(d1*d1+d2*d2+d3*d3);
    return dis;
}

int main() {
    Vec3d a(1,2,3);
    Vec3d b(1);
    Vec3d c(1,2);
   // Vec3d d(c); // generated automatically, no need to write
    int x = 2, y = 3, z = 4;
    x = y = z = 0;
    a = b; // generated automatically
    a = b = c;
    Vec3d e = a * 2;
    Vec3d f = 2 * a;
    Vec3d g = a + b;
    Vec3d h = a - b;
    double z1 = dot(a,b);
    double z2 = a.dot(b);
    double w1 = a.dist(b);
    double w2 = dist(a,b);
    cout<<e<<endl;
    cout<<f<<endl;
    cout<<g<<endl;
    cout<<h<<endl;
    cout<<z1<<endl;
    cout<<z2<<endl;
    cout<<w1<<endl;
    cout<<w2<<endl;
    //if (a == b)
    //    ;
}
